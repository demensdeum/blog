Format: Fall24-October10
Language: ru
Title: Есть только Мику
Slug: opengles-miku
Categories: techie,tutorials
<p>Результат работы над библиотекой FSGL с OpenGL ES и код:</p>
<p><iframe loading="lazy" src="https://www.youtube.com/embed/9L11ezDGRB8" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>Дальше я опишу как это все программировалось, решались разные <em>интересные</em> проблемы.</p>
<p>Сначала мы проинициализируем OpenGL ES контекст, как это делается я писал в прошлой заметке. Дальше будет рассматриваться только отрисовка, краткое описание кода.</p>
<h3>Матрица следит за тобой</h3>
<p>Данная фигура Мику на видео состоит из треугольников. Чтобы нарисовать треугольник в OpenGL, нужно задать три точки к координатами x, y, z. в 2D координатах контекста OpenGL.<br />
Так как нам нужно отрисовать фигуру содержащую 3D координаты, нам нужно использовать <strong>матрицу проекции (projection)</strong>. Также нам нужно крутить, увеличивать, или что угодно делать с моделью &#8211; для этого используется <strong>матрица модели (model)</strong>. Понятия камеры в OpenGL нет, на самом деле объекты крутятся, поворачиваются вокруг статичной камеры. Для этого используется <strong>матрица вида (view)</strong>.</p>
<p>Для упрощения реализации OpenGL ES &#8211; в нем данные матрицы отсутствуют. Вы можете использовать библиотеки которые добавляют отсутствующий функционал, например <a href="http://glm.g-truc.net" target="_blank" rel="noopener">GLM</a>.</p>
<h3><strong>Шейдеры</strong></h3>
<p>Для того чтобы позволить разработчику рисовать что угодно, и как угодно, в OpenGL ES нужно обязательно реализовать вертексные и фрагментные шейдеры. Вертексный шейдер должен получить на вход координаты отрисовки, произвести преобразования с помощью матриц, и передать координаты в gl_Position. Фрагментный или пиксельный шейдер &#8211; уже отрисовывает цвет/текстуру, применяет наложение и пр.</p>
<p>Шейдеры я писал на языке GLSL. В моей текущей реализации шейдеры встроены прямо в основной код приложения как <strong>C</strong>-строки.</p>
<h3>Буферы</h3>
<p>Вертексный буфер содержит координаты вершин (вертексов), в данный буфер также попадают координаты для текстурирования и прочие необходимые для шейдеров данные. После генерации вертексного буфера, нужно забиндить указатель на данные для вертексного шейдера. Это делается командой glVertexAttribPointer, там необходимо указать количество элементов, указатель на начало данных и размер шага, который будет использоваться для прохода по буферу. В моей реализации сделан биндинг координат вершин и текстурные координаты для пиксельного шейдера. Однако стоит сказать что передача данных (текстурных координат) во фрагментный шейдер осуществляется через вертексный шейдер. Для этого координаты объявлены с помощью <strong>varying</strong>.</p>
<p>Для того чтобы OpenGL знал в каком порядке отрисовывать точки для треугольников &#8211; вам понадобится индексный буфер (index). Индексный буфер содержит номер вертекса в массиве, с помощью трех таких индексов получается треугольник.</p>
<h3>Текстуры</h3>
<p>Для начала нужно прогрузить/сгенерировать текстуру для OpenGL. Для этого я использовал SDL_LoadBMP, загрузка текстуры происходит из bmp файла. Однако стоит отметить что годятся только 24-битные BMP, также цвета в них хранятся не в привычном порядке RGB, а в BGR. Тоесть после прогрузки нужно осуществить замену красного канала на синий.<br />
Текстурные координаты задаются в формате <a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-5-a-textured-cube/" target="_blank" rel="noopener">UV</a>, тоесть необходимо передать всего две координаты. Вывод текстуры осуществляется во фрагментном шейдере. Для этого необходимо осуществить биндинг текстуры во фрагментный шейдер.</p>
<h3>Ничего лишнего</h3>
<p>Так как, по нашему указанию, OpenGL рисует 3D через 2D &#8211; то для реализации глубины, и выборки невидимых треугольников &#8211; нужно использовать выборку (culling) и буфер глубины (Z-Buffer). В моей реализации удалось избежать ручной генерации буфера глубины, с помощью двух команд glEnable(GL_DEPTH_TEST); и выборки glEnable(GL_CULL_FACE);<br />
Также обязательно проверьте что near plane для матрицы проекции больше нуля, т.к. проверка глубины с нулевым near plane работать не будет.</p>
<h3><strong>Рендеринг</strong></h3>
<p>Чтобы заполнить вертексный буфер, индексный буфер чем-то осознанным, например моделью Мику, нужно осуществить загрузку данной модели. Для этого я использовал библиотеку <a href="https://github.com/assimp/assimp" target="_blank" rel="noopener">assimp</a>. Мику была помещена в файл формата Wavefront OBJ, прогружена с помощью assimp, и реализована конвертация данных из assimp в вертексный, индексный буферы.</p>
<p>Рендеринг проходит в несколько этапов:</p>
<ol>
<li>Поворот Мику с помощью поворота матрицы модели</li>
<li>Очистка экрана и буфера глубины</li>
<li>Отрисовка треугольников с помощью команды glDrawElements.</li>
</ol>
<p>Следующий этап &#8211; реализация рендеринга в WebGL с помощью Emscripten.</p>
<p>Исходный код:<br />
<a href="https://github.com/demensdeum/OpenGLES3-Experiments/tree/master/8-sdl-gles-obj-textured-assimp-miku" target="_blank" rel="noopener">https://github.com/demensdeum/OpenGLES3-Experiments/tree/master/8-sdl-gles-obj-textured-assimp-miku<br />
</a>Модель:<br />
<a href="https://sketchfab.com/models/7310aaeb8370428e966bdcff414273e7" target="_blank" rel="noopener">https://sketchfab.com/models/7310aaeb8370428e966bdcff414273e7</a></p>
<p>&nbsp;</p>