Format: Fall24-October10
Language: ru
Title: Паттерн Прототип
Slug: prototype-pattern
Categories: techie,tutorials
<p>Паттерн прототип относится к группе порождающих шаблонов проектирования.<br />
Допустим мы разрабатываем приложения для знакомств Tender, по бизнес-модели у нас предусмотрена платная возможность делать копии собственного профиля меняя имя автоматически, и порядок фотографий местами. Сделано это для того чтобы пользователь мог иметь возможность вести сразу несколько профилей с разным набором друзей в приложении.<br />
По нажатию на кнопку создания копии профиля, нам нужно реализовать копирование профиля, авто генерацию имени и пересортировку фотографий.<br />
Наивная имплементация псевдокодом:</p>
<pre><code>
fun didPressOnCopyProfileButton() {
    let profileCopy = new Profile()
    profileCopy.name = generateRandomName()
    profileCopy.age = profile.age
    profileCopy.photos = profile.photos.randomize()
    storage.save(profileCopy)
}
</code></pre>
<p>Теперь представим что другие члены команды сделали copy-paste кода копирования или придумали его с нуля, и после этого добавилось новое поле &#8211; likes. В данном поле хранится количество лайков профиля, теперь нужно обновить *все* места где происходит копирование вручную, добавив новое поле. Это очень долго и сложно в поддержке кода, как и в тестировании.<br />
Для решения этой проблемы придуман паттерн проектирования Прототип. Создадим общий протокол Copying, с методом copy() который возвращает копию объекта с необходимыми полями. После изменения полей сущности нужно будет обновить только один метод copy(), вместо того чтобы искать и обновлять вручную все места содержащие код копирования.</p>
<h3>Источники</h3>
<p><a href="https://refactoring.guru/ru/design-patterns/prototype" target="_blank" rel="noopener">https://refactoring.guru/ru/design-patterns/prototype</a></p>