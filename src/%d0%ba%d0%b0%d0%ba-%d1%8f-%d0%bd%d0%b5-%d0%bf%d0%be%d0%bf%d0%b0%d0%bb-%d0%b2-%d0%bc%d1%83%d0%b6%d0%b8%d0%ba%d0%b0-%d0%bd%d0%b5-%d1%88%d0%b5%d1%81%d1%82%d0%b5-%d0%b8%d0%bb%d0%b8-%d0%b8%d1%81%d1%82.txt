Format: Fall24-October10
Language: ru
Title: Как я не попал в мужика на шесте или история об удивительной изобретательности
Slug: %d0%ba%d0%b0%d0%ba-%d1%8f-%d0%bd%d0%b5-%d0%bf%d0%be%d0%bf%d0%b0%d0%bb-%d0%b2-%d0%bc%d1%83%d0%b6%d0%b8%d0%ba%d0%b0-%d0%bd%d0%b5-%d1%88%d0%b5%d1%81%d1%82%d0%b5-%d0%b8%d0%bb%d0%b8-%d0%b8%d1%81%d1%82
Categories: techie,tutorials
<p>В данной заметке я напишу о важности архитектурных решений при разработке, поддержке приложения, в условиях командной разработки.</p>
<p><a href="https://commons.wikimedia.org/wiki/File:Rube_Goldberg%27s_%22Self-Operating_Napkin%22_(cropped).gif" target="_blank" rel="noopener"><img decoding="async" src="https://upload.wikimedia.org/wikipedia/commons/a/a9/Rube_Goldberg%27s_%22Self-Operating_Napkin%22_%28cropped%29.gif" alt="" /></a></p>
<p><a href="https://commons.wikimedia.org/wiki/File:Rube_Goldberg%27s_%22Self-Operating_Napkin%22_(cropped).gif" target="_blank" rel="noopener">Самодействующая салфетка профессора Люцифера Горгонзолы. Руб Голдберг</a></p>
<p>Во времена своей юности я работал над приложением для заказа такси. В проге можно было выбирать точку пикапа, точку дропа, рассчитывать стоимость поездки, тип тарифа, и собственно говоря, заказать такси. Приложение мне досталось на последнем этапе пред-запуска, после добавления нескольких фиксов приложение было выпущено в AppStore. Уже на том этапе вся команда понимала что реализована она очень плохо, паттерны проектирования не использовались, все компоненты системы были связаны намертво, в общем и целом, можно было ее записать в один большой сплошной класс (God object), ничего бы не изменилось, так как классы смешивали свои границы ответственности и в общей своей массе перекрывали друг друга мертвой сцепкой. Позже руководством было принято решение написать приложение с нуля, с использованием корректной архитектуры, что было выполнено и итоговый продукт был внедрен нескольким десяткам B2B клиентов.</p>
<p>Однако я опишу курьезный случай из прошлой архитектуры, от которого я иногда просыпаюсь в холодном поту посреди ночи, или внезапно вспоминаю посреди дня и начинаю истерично смеяться. Все дело в том что я не смог с первого раза попасть в мужика на шесте, и это обрушило бОльшую часть приложения, но обо всем по порядку.</p>
<p>Это был обычный рабочий день, от одного из заказчиков пришло задание немного доработать дизайн приложения &#8211; банально подвинуть на несколько пикселей вверх иконку в центре экрана выбора адреса пикапа. Что ж, профессионально оценив задачу в 10 минут я поднял иконку на 20 пикселей вверх, совершенно ничего не подозревая, я решил проверить заказ такси.</p>
<p>Что? Приложение больше не показывает кнопку заказа? Как это получилось?</p>
<p>Я не мог поверить своим глазам, после поднятия иконки на 20 пикселей приложение перестало показывать кнопку продолжения заказа. Откатив изменение я увидел кнопку снова. Что-то здесь было не так. Просидев 20 минут в дебаггере я немного устал от разматывания спагетти из вызовов перекрывающих друг друга классов, но обнаружил что *сдвигание картинки действительно меняет логику приложения*</p>
<p>Все дело было в иконке по центру &#8211; мужике на шесте, при сдвигании карты он подпрыгивал для анимации перемещения камеры, за этой анимацией следовало пропадание кнопки внизу. Видимо прога подумала что сдвинутый на 20 пикселей мужик находился в прыжке, поэтому по внутренней логике прятала кнопку подтверждения.</p>
<p>Как это может происходить? Неужели *состояние* экрана зависит не от паттерна машины состояния, а от *представления* позиции мужика на шесте?</p>
<p>Все так и оказалось, при каждой отрисовке карты приложение *<a href="https://developer.apple.com/documentation/uikit/uiview/1622469-hittest?language=objc" target="_blank" rel="noopener">визуально тыкало</a>* в середину экрана и проверяла что там, если там мужик на шесте то это значит что анимация сдвига карты закончилась и нужно показать кнопку. В случае когда мужика там нет — значит происходит сдвиг карты, и кнопку надо спрятать.</p>
<p>В примере выше прекрасно все, во первых это пример Машины Голдберга (заумные машины), во вторых пример нежелания разработчика как-то взаимодействовать с другими разработчиками в команде (попробуй разберись без меня), в третьих можно перечислить все проблемы по SOLID, паттернам (запахи кода), нарушение MVC и многое многое другое.</p>
<p>Старайтесь так не делать, развивайтесь во всех возможных направлениях, помогайте своим коллегам в работе. Всех с наступившим новым годом)</p>
<h3>Ссылки</h3>
<p><a href="https://ru.wikipedia.org/wiki/Машина_Голдберга" target="_blank" rel="noopener">https://ru.wikipedia.org/wiki/Машина_Голдберга</a></p>
<p><a href="https://ru.wikipedia.org/wiki/SOLID" target="_blank" rel="noopener">https://ru.wikipedia.org/wiki/SOLID</a></p>
<p><a href="https://refactoring.guru/ru/refactoring/smells" target="_blank" rel="noopener">https://refactoring.guru/ru/refactoring/smells</a></p>
<p><a href="https://ru.wikipedia.org/wiki/Model-View-Controller" target="_blank" rel="noopener">https://ru.wikipedia.org/wiki/Model-View-Controller</a></p>
<p><a href="https://refactoring.guru/ru/design-patterns/state" target="_blank" rel="noopener">https://refactoring.guru/ru/design-patterns/state</a></p>