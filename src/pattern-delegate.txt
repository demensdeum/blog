Format: Fall24-October10
Language: ru
Title: Паттерн Делегат
Slug: pattern-delegate
Categories: techie,tutorials
<p>Паттерн делегат относится к основным паттернам проектирования.<br />
Допустим мы разрабатываем приложение барбершопа. В приложении есть календарь для выбора дня для записи, по тапу на дате должен открываться список барберов с возможностью выбора.<br />
Реализуем наивное связывание компонентов системы, объединим календарь и экран с помощью указателей друг на друга, для реализации вывода списка:</p>
<pre><code>

// псевдокод

class BarbershopScreen {
   let calendar: Calendar

   func showBarbersList(date: Date) {
      showSelectionSheet(barbers(forDate: date))
   }
}

class Calendar {
    let screen: BarbershopScreen

    func handleTap(on date: Date) {
        screen.showBarbersList(date: date)
    }
}
</code></pre>
<p>Через несколько дней требования меняются, перед выводом списка нужно показывать предложения с выбором услуг (стрижка бороды и т.п.) но не всегда, во все дни кроме субботы.<br />
Добавляем в календарь проверку суббота сегодня или нет, в зависимости от нее вызываем метод списка барберов или списка услуг, для наглядности продемонстрирую:</p>
<pre><code>

// псевдокод

class BarbershopScreen {
   let calendar: Calendar

   func showBarbersList(date: Date) {
      showSelectionSheet(barbers(forDate: date))
   }

   func showOffersList() {
      showSelectionSheet(offers)
   }
}

class Calendar {
    let screen: BarbershopScreen

    func handleTap(on date: Date)  {
        if date.day != .saturday {
             screen.showOffersList()
        }
        else {
             screen.showBarbersList(date: date)
        }
    }
}
</code></pre>
<p>Через неделю нас просят добавить календарь на экран обратной связи, и в этот момент случается первое архитектурное ой!<br />
Что же делать? Календарь ведь связан намертво с экраном записи на стрижку.<br />
ух! уф! ой-ой<br />
Если продолжить работать с такой бредовой архитектурой приложения, то следует сделать копию всего класса календаря и связать эту копию с экраном обратной связи.<br />
Ок вроде хорошо, далее мы добавили еще несколько экранов и несколько копий календаря, и тут наступил момент икс. Нас попросили изменить дизайн календаря, тоесть теперь нужно найти все копии календаря и добавить одинаковые изменения во все. Такой “подход” очень сказывается на скорости разработки, увеличивает шанс допустить ошибку. В итоге такие проекты оказываются в состоянии разбитого корыта, когда уже даже автор оригинальной архитектуры не понимает как работают копии его классов, прочие хаки добавленные по пути разваливаются на лету.<br />
Что же нужно было делать, а лучше что еще не поздно начать делать? Использовать паттерн делегирования!<br />
Делегирование это способ передавать события класса через общий интерфейс. Далее пример делегата для календаря:</p>
<pre><code>
protocol CalendarDelegate {
   func calendar(_ calendar: Calendar, didSelect date: Date)
}
</code></pre>
<p>Теперь добавим код работу с делегатом в код примера:</p>
<pre><code>

// псевдокод

class BarbershopScreen: CalendarDelegate {
   let calendar: Calendar

   init() {
       calendar.delegate = self
   }

   func calendar(_ calendar: Calendar, didSelect date: Date) {
        if date.day != .saturday {
            showOffersList()
        }
        else {
             showBarbersList(date: date)
        }
   }

   func showBarbersList(date: Date) {
      showSelectionSheet(barbers(forDate: date))
   }

   func showOffersList() {
      showSelectionSheet(offers)
   }
}

class Calendar {
    weak var delegate: CalendarDelegate

    func handleTap(on date: Date)  {
        delegate?.calendar(self, didSelect: date)
    }
}
</code></pre>
<p>В итоге мы отвязали календарь от экрана совсем, при выборе даты из календаря он передает событие выбора даты &#8211; *делегирует* обработку события подписчику; подписчиком выступает экран.<br />
Какие преимущества мы получаем в таком подходе? Теперь мы можем менять календарь и логику экранов независимо друг от друга, не дублируя классы, упрощая дальнейшую поддержку; таким образом реализуется “принцип единственной ответственности” реализации компонентов системы, соблюдается принцип DRY.<br />
При использовании делегирования можно добавлять, менять логику вывода окошек, очередности чего угодно на экране и это совершенно не будет затрагивать календарь и прочие классы, которые объективно и не должны участвовать в несвязанных напрямую с ними процессами.<br />
Альтернативно, не особо утруждающие себя программисты, используют отправку сообщений через общую шину, без написания отдельного протокола/интерфейса делегата, там где лучше было бы использовать делегирование. О недостатках такого подхода я написал в прошлой заметке &#8211; “Паттерн Наблюдатель”.</p>
<h3>Источники</h3>
<p><a href="https://refactoring.guru/ru/replace-inheritance-with-delegation" target="_blank" rel="noopener">https://refactoring.guru/ru/replace-inheritance-with-delegation</a></p>