Format: Fall24-October10
Language: ru
Title: Tree sort
Slug: tree-sort
Categories: techie,tutorials
<p>Tree sort – сортировка двоичным деревом поиска. Временная сложность &#8211; O(n²). В таком дереве у каждой ноды слева числа меньше ноды, справа больше ноды, при приходе от корня и распечатке значений слева направо, получаем отсортированный список чисел. Удивительно да?</p>
<p>Рассмотрим схему двоичного дерева поиска:</p>
<p><img loading="lazy" decoding="async" src="https://demensdeum.com/blog/wp-content/uploads/2022/08/tree.png" alt="" class="alignnone size-full wp-image-3410" width="474" height="393" srcset="https://demensdeum.com/blog/wp-content/uploads/2022/08/tree.png 474w, https://demensdeum.com/blog/wp-content/uploads/2022/08/tree-300x249.png 300w" sizes="auto, (max-width: 474px) 100vw, 474px" /></p>
<p><span class="mw-mmv-title" original-title=""><a href="https://commons.wikimedia.org/wiki/User:Dcoetzee" target="_blank" rel="noopener">Derrick Coetzee</a> (public domain)</span></p>
<p>Попробуйте вручную прочитать числа начиная с предпоследней левой ноды нижнего левого угла, для каждой ноды слева – нода – справа.</p>
<p>Получится так:</p>
<ol>
<li>Предпоследняя нода слева внизу &#8211; 3.</li>
<li>У нее есть левая ветвь &#8211; 1.</li>
<li>Берем это число (1)</li>
<li>Дальше берем саму вершину 3 (1, 3)</li>
<li>Справа ветвь 6, но она содержит ветви. Поэтому ее прочитываем таким же образом.</li>
<li>CЛева ветвь ноды 6 число 4 (1, 3, 4)</li>
<li>Сама нода 6 (1, 3, 4, 6)</li>
<li>Справа 7 (1, 3, 4, 6, 7)</li>
<li>Идем наверх к корневой ноде &#8211; 8 (1,3, 4 ,6, 7, 8)</li>
<li>Печатаем все что справа по аналогии</li>
<li>Получаем итоговый список &#8211; 1, 3, 4, 6, 7, 8, 10, 13, 14</li>
</ol>
<p>Чтобы реализовать алгоритм в коде потребуются две функции:</p>
<ol>
<li>Сборка бинарного дерева поиска</li>
<li>Распечатка бинарного дерева поиска в правильно порядке</li>
</ol>
<p>Собирают бинарное древо поиска также как и прочитывают, к каждой ноде прицепляется число слева или справа, в зависимости от того – меньше оно или больше.</p>
<p>Пример на Lua:</p>
<div class="hcb_wrap">
<pre class="prism line-numbers lang-c" data-lang="Lua"><code>Node = {value = nil, lhs = nil, rhs = nil}

function Node:new(value, lhs, rhs)
    output = {}
    setmetatable(output, self)
    self.__index = self  
    output.value = value
    output.lhs = lhs
    output.rhs = rhs
    output.counter = 1
    return output  
end

function Node:Increment()
    self.counter = self.counter + 1
end

function Node:Insert(value)
    if self.lhs ~= nil and self.lhs.value > value then
        self.lhs:Insert(value)
        return
    end

    if self.rhs ~= nil and self.rhs.value < value then
        self.rhs:Insert(value)
        return
    end

    if self.value == value then
        self:Increment()
        return
    elseif self.value > value then
        if self.lhs == nil then
            self.lhs = Node:new(value, nil, nil)
        else
            self.lhs:Insert(value)
        end
        return
    else
        if self.rhs == nil then
            self.rhs = Node:new(value, nil, nil)
        else
            self.rhs:Insert(value)
        end
        return
    end
end

function Node:InOrder(output)
    if self.lhs ~= nil then
       output = self.lhs:InOrder(output)
    end
    output = self:printSelf(output)
    if self.rhs ~= nil then
        output = self.rhs:InOrder(output)
    end
    return output
end

function Node:printSelf(output)
    for i=0,self.counter-1 do
        output = output .. tostring(self.value) .. " "
    end
    return output
end

function PrintArray(numbers)
    output = ""
    for i=0,#numbers do
        output = output .. tostring(numbers[i]) .. " "
    end    
    print(output)
end

function Treesort(numbers)
    rootNode = Node:new(numbers[0], nil, nil)
    for i=1,#numbers do
        rootNode:Insert(numbers[i])
    end
    print(rootNode:InOrder(""))
end


numbersCount = 10
maxNumber = 9

numbers = {}

for i=0,numbersCount-1 do
    numbers[i] = math.random(0, maxNumber)
end

PrintArray(numbers)
Treesort(numbers)</code></pre>
</div>
<p>Важный нюанс что для чисел которые равны вершине придумано множество интересных механизмов подцепления к ноде, я же просто добавил счетчик к классу вершины, при распечатке числа возвращаются по счетчику.</p>
<h3>Ссылки</h3>
<p><a href="https://gitlab.com/demensdeum/algorithms/-/tree/master/sortAlgorithms/treesort" target="_blank" rel="noopener">https://gitlab.com/demensdeum/algorithms/-/tree/master/sortAlgorithms/treesort</a></p>
<h3>Источники</h3>
<p><a href="https://www.youtube.com/watch?v=nNg_digu7tQ" target="_blank" rel="noopener">TreeSort Algorithm Explained and Implemented with Examples in Java | Sorting Algorithms | Geekific &#8211; YouTube</a></p>
<p><a href="https://www.youtube.com/watch?v=3rez7Qnw84M" target="_blank" rel="noopener">Tree sort &#8211; YouTube</a></p>
<p><a href="https://www.youtube.com/watch?v=12omz-VAyRk" target="_blank" rel="noopener">Convert Sorted Array to Binary Search Tree (LeetCode 108. Algorithm Explained) &#8211; YouTube</a></p>
<p><a href="https://rosettacode.org/wiki/Sorting_algorithms/Tree_sort_on_a_linked_list" target="_blank" rel="noopener">Sorting algorithms/Tree sort on a linked list &#8211; Rosetta Code</a></p>
<p><a href="https://www.geeksforgeeks.org/tree-sort/" target="_blank" rel="noopener">Tree Sort &#8211; GeeksforGeeks</a></p>
<p><a href="https://en.wikipedia.org/wiki/Tree_sort" target="_blank" rel="noopener">Tree sort &#8211; Wikipedia</a></p>
<p><a href="https://www.geeksforgeeks.org/how-to-handle-duplicates-in-binary-search-tree/" target="_blank" rel="noopener">How to handle duplicates in Binary Search Tree? &#8211; GeeksforGeeks</a></p>
<p><a href="https://www.youtube.com/watch?v=n2MLjGeK7qA" target="_blank" rel="noopener">Tree Sort | GeeksforGeeks &#8211; YouTube</a></p>