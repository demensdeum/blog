Format: Fall24-October10
Language: ru
Title: Хороший, плохой, мерзкий синглтон
Slug: the-good-the-bad-and-the-ugly-singleton
Categories: blog,tutorials
<p>В этой заметке я опишу мой опыт и опыт моих коллег при работе с паттерном Синглтон (Singleton в иностранной литературе), при работе над разными (удачными и не очень) проектами. Опишу почему лично я считаю этот паттерн использовать <strong>нельзя нигде</strong>, также опишу какие психологические факторы в команде влияют на интеграцию этого антипаттерна. Посвящается всем павшим и покалеченным разработчикам, пытавшимся понять почему все началось с того как один из членов команды привел маленького милого щеночка, простого в обращении, не требующего особого ухода и знаний по уходу за ним, а закончилось тем что взращенный зверь взял ваш проект в заложники, требует все больше и больше человеко-часов и съедает человеко-нервы пользователей, ваши деньги и вырисовывает совершенно чудовищные цифры по оценке реализации, казалось бы, простых вещей.</p>
<p><img loading="lazy" decoding="async" class="alignnone size-full wp-image-1712" src="https://demensdeum.com/blog/wp-content/uploads/2019/04/singleton.jpg" alt="" width="380" height="323" /><br />
<a href="https://pixabay.com/photos/wolf-in-sheep-s-clothing-wolf-sheep-2577813/" target="_blank" rel="noopener noreferrer">Wolf in sheep&#8217;s clothing</a> by <a class="hover_opacity" href="https://pixabay.com/users/SarahRichterArt-1546275/">SarahRichterArt</a></p>
<p><em>История происходит в альтернативной вселенной, все совпадения случайны&#8230;</em></p>
<h3>Погладь кота на дому с Cat@Home</h3>
<p>У каждого человека иногда в жизни возникает непреодолимое желание погладить кота. Аналитики всего мира пророчат что первый стартап создавший приложение по доставке и аренде котиков станет крайне популярным, в недалекой перспективе будет куплен компанией <strong>Moogle</strong> за триллионы долларов. Вскоре так и происходит &#8211; парень из Тюмени создает приложение <strong>Cat@Home</strong>, и вскоре становится триллиардером, компания <strong>Moogle</strong> получает себе новый источник прибыли, а миллионы застрессованых людей получают возможность заказать кота на дом для дальнейшего глаженья и успокоения.</p>
<h3>Атака клонов</h3>
<p>Крайне богатый дантист из Мурманска Алексей Голобородько, впечатлившись статьей про Cat@Home из Фorbes, решает что тоже хочет быть астрономически богатым. Для достижения этой цели, через своих друзей, он находит компанию из Голдфилда &#8211; Wakeboard DevPops которая оказывает услуги по разработке ПО, он заказывает разработку клона Cat@Home у них.</p>
<h3>Команда победителей</h3>
<p>Проект называют Fur&#038;Pure, поручают талантливой команде разработчиков из 20 человек; далее сосредоточимся на группе мобильной разработки из 5 человек. Каждый член команды получает свою часть работы, вооружившись agile-ом и скрамом, команда завершает разработку в срок (за полгода), без багов, релизит приложение в iStore, где ее оценивают 100.000 пользователей на 5, много комментариев о том как прекрасно приложение, как прекрасен сервис (Альтернативная вселенная как-никак). Коты выглажены, приложение выпущено, вроде-бы все идет хорошо. Однако компания Moogle не торопится покупать стартап за триллионы долларов, потому что в Cat@Home уже появились не только коты но и собаки.</p>
<h3>Собака лает, караван идет</h3>
<p>Владелец приложения решает что пора добавить в приложение собак, обращается за оценкой в компанию и получает примерно <strong>минимум полгода на добавление </strong>собак в приложение. Фактически приложение будет написано с нуля снова. За это время Moogle добавит в приложение змей, пауков и морских свинок, а Fur&#038;Pur получит только собак.<br />
Почему так получилось? Во всем виновато отсутствие гибкой архитектуры приложения, одним из самых распространенных факторов является антипаттерн проектирования <strong>Singleton</strong>.</p>
<h3>А что такого?</h3>
<p>Для того чтобы заказать кота на дом, потребителю нужно создать заявку и отправить ее в офис, где в офисе ее обработают и пришлют курьера с котом, курьер уже получит оплату за услугу.<br />
Один из программистов решает создать класс &#8220;ЗаявкаНаКота&#8221; с необходимыми полями, выносит этот класс в глобальное пространство приложения через <strong>синглтон</strong>. Зачем он это делает? Для экономии времени (копеечная экономия получаса), ведь проще вынести заявку в <strong>общий доступ, </strong>чем продумывать архитектуру приложения и использовать dependency injection. Дальше остальные разработчики подхватывают этот <strong>глобальный объект и привязывают свои классы к нему. </strong>Например все экраны сами обращаются к глобальному объекту &#8220;ЗаявкаНаКота&#8221; и показывают данные по заявке. В итоге такое монолитное приложение тестируется и сдается в релиз.<br />
Все вроде хорошо, но вдруг появляется заказчик с требованием добавить в приложение заявки на собак. Команда судорожно начинает оценивать сколько компонентов в системе затронет данное изменение. По окончанию анализа оказывается что нужно переделать от 60 до 90% кода, чтобы научить приложение принимать в глобальном объекте-синглтоне не только &#8220;ЗаявкуНаКота&#8221; но и &#8220;ЗаявкуНаСобаку&#8221;, оценивать добавление остальных животных на данном этапе уже бесполезно, справиться хотя бы с двумя.</p>
<h3>Как не допустить синглтон</h3>
<p>Во-первых, на этапе сбора требований явно указать необходимость в создании гибкой, расширяемой архитектуры. Во-вторых, стоит проводить независимую экспертизу кода продукта на стороне, с обязательным исследованием слабых мест. Если вы разработчик и вы любите синглтоны, то предлагаю одуматься пока не поздно, иначе бессонные ночи и выжженные нервы обеспечены. Если вы работаете с проектом по наследству, в котором много синглтонов, то попытайтесь избавиться от них как можно быстрее, или от проекта.<br />
Переходить с <em>антипаттерна синглтонов-глобальных объектов/переменных</em> нужно на dependency injection &#8211; простейший паттерн проектирования в котором все необходимые данные задаются экземпляру класса на этапе инициализации, без дальнейшей необходимости быть привязанным к глобальному пространству.</p>
<h3>Источники</h3>
<p><a href="https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/137975/what-is-so-bad-about-singletons</a><br />
<a href="http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/" target="_blank" rel="noopener noreferrer">http://misko.hevery.com/2008/08/17/singletons-are-pathological-liars/</a><br />
<a href="https://blog.ndepend.com/singleton-pattern-costs/" target="_blank" rel="noopener noreferrer">https://blog.ndepend.com/singleton-pattern-costs/</a></p>