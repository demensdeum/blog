Format: Fall24-October10
Language: ru
Title: Паттерн Строитель
Slug: builder-pattern
Categories: techie,tutorials
<p>Паттерн Строитель относится к группе паттернов существование которых мне не особо понятно, отмечаю явную избыточность сего. Относится к группе порождающих паттернов проектирования. Используется для реализации простого интерфейса создания комплексных объектов.</p>
<h3>Применимость</h3>
<p><strong>Упрощение интерфейса.</strong> Он может облегчить создание объекта в конструкторах с большим числом аргументов, объективно улучшить читаемость кода.</p>
<p>Пример на C++ без строителя:</p>
<pre><code>auto monster = new Monster();
auto weapon = new Weapon(“Claws”);
monster->weapon = weapon;
auto health = new MonsterHealth(100);
monster->health = health;</code></pre>
<p>Пример со строителем на C++:</p>
<pre><code>auto monster = new MonsterBuilder()
                  .addWeapon(“Claws”)
                  .addHealth(100)
                  .build();</code></pre>
<p>Однако в языках поддерживающих именованные аргументы (named arguments), необходимость использовать именно для этого случая отпадает.</p>
<p>Пример на Swift с использованием named arguments:</p>
<pre><code>
let monster = Monster(weapon: “Claws”, health: 100)
</code></pre>
<p><strong>Иммутабельность.</strong> Используя строитель можно обеспечить инкапсуляцию создаваемого объекта, до окончательного этапа сборки. Здесь надо хорошо подумать, спасет ли использование паттерна от высокой динамики окружения в котором вы работаете, возможно применение паттерна ничего не даст, из-за простого отсутствия культуры использования инкапсуляции у команды разработки.</p>
<p><strong>Взаимодействие с компонентами на разных этапах создания объекта.</strong> Также используя паттерн есть возможность обеспечить пошаговое создание объекта, при взаимодействии с другими компонентами системы. Скорее всего это очень полезно (?)</p>
<h3>Критика</h3>
<p>Конечно нужно *хорошенько* подумать стоит ли налаживать повсеместное использование паттерна в своем проекте. Языки с современным синтаксисом и продвинутым IDE нивелируют необходимость в использовании Строителя, в плане улучшения читаемости кода (см, пункт про именованные аргументы)<br />
Нужно ли было использовать данный паттерн в 1994 году, на момент выпуска книги GoF? Скорее всего да, однако, судя по Open source кодовой базе тех лет, мало кто им пользовался.</p>
<h3>Источники</h3>
<p><a href="https://refactoring.guru/ru/design-patterns/builder" target="_blank" rel="noopener">https://refactoring.guru/ru/design-patterns/builder</a></p>