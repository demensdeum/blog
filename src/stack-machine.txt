Format: Fall24-October10
Language: ru
Title: Стек машина и RPN
Slug: stack-machine
Categories: techie,tutorials
<p>Допустим нам необходимо реализовать простой интерпретатор байткода, какой подход к реализации этой задачи выбрать?</p>
<p>Структура данных Стек предоставляет возможность реализовать простейшую байткод-машину. Особенности и реализации стек машин описаны во множестве статей западного и отечественного интернета, упомяну только что виртуальная машина Java является примером стековой машины.</p>
<p>Принцип работы машины прост, на вход подается программа содержащая данные и коды операций (опкоды), с помощью манипуляций со стеком выполняется реализация необходимых операций. Рассмотрим пример программы байткода моей стековой машины:</p>
<pre><code> 
пMVkcatS olleHП
 
</code></pre>
<p>На выходе мы получим строку “Hello StackVM”. Стэк машина прочитывает программу слева-направо, загружая посимвольно данные в стек, при появлении опкода в символе &#8211; выполняет реализацию команды с использованием стека.</p>
<p>Пример реализации стековой машины на nodejs:</p>
<p><iframe loading="lazy" src="https://repl.it/repls/FloralwhiteRoundScreenscraper?lite=true" width="100%" height="400px" frameborder="no" scrolling="no" sandbox="allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals" allowfullscreen="allowfullscreen"></iframe></p>
<h3>Обратная польская запись (RPN)</h3>
<p>Также стековые машины легко использовать для реализации калькуляторов, для этого используют Обратную польскую запись (постфиксную запись).<br />
Пример обычной инфиксной записи:<br />
2*2+3*4</p>
<p>Конвертируется в RPN:<br />
22*34*+</p>
<p>Для подсчета постфиксной записи используем стек машину:<br />
2 &#8211; на вершину стека (стек: 2)<br />
2 &#8211; на вершину стека (стек: 2,2)<br />
* &#8211; получаем вершину стека два раза, перемножаем результат, отправляем на вершину стека (стек: 4)<br />
3 &#8211; на вершину стека (стек: 4, 3)<br />
4 &#8211; на вершину стека (стек: 4, 3, 4)<br />
* &#8211; получаем вершину стека два раза, перемножаем результат, отправляем на вершину стека (стек: 4, 12)<br />
+ &#8211; получаем вершину стека два раза, складываем результат, отправляем на вершину стека (стек: 16)</p>
<p>Как можно заметить &#8211; результат операций 16 остается в стеке, его можно вывести реализовав опкоды печати стека, например:<br />
п22*34*+П</p>
<p>П &#8211; опкод начала печати стека, п &#8211; опкод окончания печати стека и отправки итоговой строки на рендеринг.<br />
Для конвертации арифметических операций из инфиксной в постфикснуют используют алгоритм Эдсгера Дейкстры под названием “Сортировочная станция”. Пример реализации можно посмотреть выше, либо в репозитории проекта стек машины на nodejs ниже.</p>
<h3>Источники</h3>
<p><a href="https://tech.badoo.com/ru/article/579/interpretatory-bajt-kodov-svoimi-rukami/" target="_blank" rel="noopener noreferrer">https://tech.badoo.com/ru/article/579/interpretatory-bajt-kodov-svoimi-rukami/</a><br />
<a href="https://ru.wikipedia.org/wiki/Обратная_польская_запись" target="_blank" rel="noopener noreferrer">https://ru.wikipedia.org/wiki/Обратная_польская_запись</a></p>
<h3>Исходный код</h3>
<p><a href="https://gitlab.com/demensdeum/stackvm/" target="_blank" rel="noopener noreferrer">https://gitlab.com/demensdeum/stackvm/</a></p>