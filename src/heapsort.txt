Format: Fall24-October10
Language: ru
Title: Heapsort
Slug: heapsort
Categories: techie,tutorials
<p>Heapsort – пирамидальная сортировка. Временная сложность алгоритма &#8211; O(n log n), шустрый да? Я бы назвал эту сортировку – сортировкой падающих камушков. Объяснять её, как мне кажется, проще всего визуально.</p>
<p><iframe loading="lazy" title="Cats Who Knock Things Over! (A compilation)" width="620" height="349" src="https://www.youtube.com/embed/09CC-dYDNMQ?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></p>
<p>На вход подается список цифр, например:<br />
5, 0, 7, 2, 3, 9, 4</p>
<p>Слева направо делается структура данных – двоичное дерево, или как я ее называю &#8211; пирамидка. У элементов пирамидки могут быть максимум два дочерних элемента, со-но всего один верхний элемент.</p>
<p>Сделаем двоичное дерево:<br />
⠀⠀5<br />
⠀0⠀7<br />
2 3 9 4</p>
<p>Если долго смотреть на пирамидку, то можно увидеть что это просто числа из массива, идущие друг за другом, количество элементов в каждом этаже умножается на два.</p>
<p>Далее начинается самое интересное, отсортируем пирамидку снизу вверх, методом падающих камушков (heapify). Сортировку можно было бы начинать с последнего этажа (2 3 9 4 ), но смысла нет т.к. нет этажа ниже, куда можно было бы упасть.</p>
<p>Поэтому начинаем ронять элементы с предпоследнего этажа (0 7)<br />
⠀⠀5<br />
⠀0⠀<strong>7</strong><br />
2 3 9 4</p>
<p>Первый элемент для падения выбирается справа, нашем случае это 7, далее смотрим что под ним, а под ним 9 и 4, девятка больше четверки, так еще и девятка больше семерки! Роняем 7 на 9, а 9 поднимаем на место 7.<br />
⠀⠀5<br />
⠀0⠀9<br />
2 3 <strong>7</strong> 4</p>
<p>Далее понимаем что семерке падать ниже некуда, переходим к числу 0 которое находится на предпоследнем этаже слева:<br />
⠀⠀5<br />
⠀<strong>0</strong>⠀9<br />
2 3 7 4</p>
<p>Смотрим что под ним &#8211; 2 и 3, два меньше трех, три больше нуля, поэтому меняем ноль и три местами:<br />
⠀⠀5<br />
⠀3⠀9<br />
2 <strong>0</strong> 7 4</p>
<p>Когда добрались до конца этажа – переходите на этаж выше и роняйте там всё, если сможете.<br />
В итоге получится структура данных – куча (heap), а именно max heap, т.к. наверху самый большой элемент:<br />
⠀⠀<strong>9</strong><br />
⠀3⠀7<br />
2 0 5 4</p>
<p>Если вернуть в представление массива, то получится список:<br />
[<strong>9</strong>, 3, 7, 2, 0, 5, 4]</p>
<p>Из этого можно сделать вывод, что поменяв местами первый и последний элемент, мы получим первое число в окончательной отсортированной позиции, а именно 9 должна стоять в конце отсортированного списка, меняем местами:<br />
[4, 3, 7, 2, 0, 5, <strong>9</strong>]</p>
<p>Посмотрим на бинарное дерево:<br />
⠀⠀4<br />
⠀3⠀7<br />
2 0 5 9</p>
<p>Получилась ситуация при которой нижняя часть древа отсортирована, нужно лишь уронить 4 до корректной позиции, повторяем алгоритм, но не учитываем уже отсортированные числа, а именно 9:<br />
⠀⠀<strong>4</strong><br />
⠀3⠀7<br />
2 0 5 9</p>
<p>⠀⠀7<br />
⠀3⠀<strong>4</strong><br />
2 0 5 9</p>
<p>⠀⠀7<br />
⠀3⠀5<br />
2 0 <strong>4</strong> 9</p>
<p>Получилось что мы, уронив 4, подняли следующее после 9 самое больше число &#8211; 7. Меняем местами последнее неотсортированное число (4) и самое больше число (7)<br />
⠀⠀4<br />
⠀3⠀5<br />
2 0 7 9</p>
<p>Получилось что теперь мы имеем два числа в корректной окончательной позиции:<br />
4, 3, 5, 2, 0, <strong>7</strong>, <strong>9</strong></p>
<p>Далее повторяем алгоритм сортировки, игнорируя уже отсортированные, в итоге получим <a href="https://www.youtube.com/watch?v=nnun8y7r8_U" target="_blank" rel="noopener">кучу</a> вида:<br />
⠀⠀0<br />
⠀2⠀3<br />
4 5 7 9</p>
<p>Или в виде списка:<br />
0, 2, 3, 4, 5, 7, 9</p>
<h3>Реализация</h3>
<p>Алгоритм обычно разделяют на три функции:</p>
<ol>
<li>Создание кучи</li>
<li>Алгоритм просеивания (heapify)</li>
<li>Замена последнего неотсортированного элемента и первого</li>
</ol>
<p>Куча создается с помощью прохода по предпоследнему ряду бинарного дерева с помощью функции heapify, справа налево до конца массива. Далее в цикле делается первая замена чисел, после чего первый элемент падает/остается на месте, в результате чего самый большой элемент попадает на первое место, цикл повторяется с уменьшением участников на единицу, т.к. после каждого прохода в конце списка остаются отсортированные числа.</p>
<p>Пример Heapsort на Ruby:</p>
<div class="hcb_wrap">
<div class="hcb_wrap">
<pre class="prism line-numbers lang-unknown" data-lang="unknown"><code>


module Colors

    BLUE = "\033[94m"

    RED = "\033[31m"

    STOP = "\033[0m"

end



def heapsort(rawNumbers)

    numbers = rawNumbers.dup



    def swap(numbers, from, to)

        temp = numbers[from]

        numbers[from] = numbers[to]

        numbers[to] = temp

    end



    def heapify(numbers)

        count = numbers.length()

        lastParentNode = (count - 2) / 2



        for start in lastParentNode.downto(0)

            siftDown(numbers, start, count - 1)

            start -= 1 

        end



        if DEMO

            puts "--- heapify ends ---"

        end

    end



    def siftDown(numbers, start, rightBound)      

        cursor = start

        printBinaryHeap(numbers, cursor, rightBound)



        def calculateLhsChildIndex(cursor)

            return cursor * 2 + 1

        end



        def calculateRhsChildIndex(cursor)

            return cursor * 2 + 2

        end            



        while calculateLhsChildIndex(cursor) <= rightBound

            lhsChildIndex = calculateLhsChildIndex(cursor)

            rhsChildIndex = calculateRhsChildIndex(cursor)



            lhsNumber = numbers[lhsChildIndex]

            biggerChildIndex = lhsChildIndex



            if rhsChildIndex <= rightBound

                rhsNumber = numbers[rhsChildIndex]

                if lhsNumber < rhsNumber

                    biggerChildIndex = rhsChildIndex

                end

            end



            if numbers[cursor] < numbers[biggerChildIndex]

                swap(numbers, cursor, biggerChildIndex)

                cursor = biggerChildIndex

            else

                break

            end

            printBinaryHeap(numbers, cursor, rightBound)

        end

        printBinaryHeap(numbers, cursor, rightBound)

    end



    def printBinaryHeap(numbers, nodeIndex = -1, rightBound = -1)

        if DEMO == false

            return

        end

        perLineWidth = (numbers.length() * 4).to_i

        linesCount = Math.log2(numbers.length()).ceil()

        xPrinterCount = 1

        cursor = 0

        spacing = 3

        for y in (0..linesCount)

            line = perLineWidth.times.map { " " }

            spacing = spacing == 3 ? 4 : 3

            printIndex = (perLineWidth / 2) - (spacing * xPrinterCount) / 2

            for x in (0..xPrinterCount - 1)

                if cursor >= numbers.length

                    break

                end

                if nodeIndex != -1 && cursor == nodeIndex

                    line[printIndex] = "%s%s%s" % [Colors::RED, numbers[cursor].to_s, Colors::STOP]

                elsif rightBound != -1 && cursor > rightBound

                    line[printIndex] = "%s%s%s" % [Colors::BLUE, numbers[cursor].to_s, Colors::STOP]

                else

                    line[printIndex] = numbers[cursor].to_s

                end

                cursor += 1

                printIndex += spacing

            end

            print line.join()

            xPrinterCount *= 2           

            print "\n"            

        end

    end



    heapify(numbers)

    rightBound = numbers.length() - 1



    while rightBound > 0

        swap(numbers, 0, rightBound)   

        rightBound -= 1

        siftDown(numbers, 0, rightBound)     

    end



    return numbers

end



numbersCount = 14

maximalNumber = 10

numbers = numbersCount.times.map { Random.rand(maximalNumber) }

print numbers

print "\n---\n"



start = Time.now

sortedNumbers = heapsort(numbers)

finish = Time.now

heapSortTime = start - finish



start = Time.now

referenceSortedNumbers = numbers.sort()

finish = Time.now

referenceSortTime = start - finish



print "Reference sort: "

print referenceSortedNumbers

print "\n"

print "Reference sort time: %f\n" % referenceSortTime

print "Heap sort:      "

print sortedNumbers

print "\n"

if DEMO == false

    print "Heap sort time:      %f\n" % heapSortTime

else

    print "Disable DEMO for performance measure\n"

end



if sortedNumbers != referenceSortedNumbers

    puts "Validation failed"

    exit 1

else

    puts "Validation success"

    exit 0

end

</code></pre>
</div>
</div>
<p>Без визуализации данный алгоритм понять не просто, поэтому первое что я рекомендую – написать функцию которая будет печатать текущий вид бинарного дерева.</p>
<h3>Ссылки</h3>
<p><a href="https://gitlab.com/demensdeum/algorithms/-/blob/master/sortAlgorithms/heapsort/heapsort.rb" target="_blank" rel="noopener">https://gitlab.com/demensdeum/algorithms/-/blob/master/sortAlgorithms/heapsort/heapsort.rb</a></p>
<h3>Источники</h3>
<p><a href="http://rosettacode.org/wiki/Sorting_algorithms/Heapsort" target="_blank" rel="noopener">http://rosettacode.org/wiki/Sorting_algorithms/Heapsort</a><br />
<a href="https://www.youtube.com/watch?v=LbB357_RwlY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=LbB357_RwlY</a></p>
<p><a href="https://habr.com/ru/company/otus/blog/460087/" target="_blank" rel="noopener">https://habr.com/ru/company/otus/blog/460087/</a></p>
<p><a href="https://ru.wikipedia.org/wiki/Пирамидальная_сортировка" target="_blank" rel="noopener">https://ru.wikipedia.org/wiki/Пирамидальная_сортировка</a></p>
<p><a href="https://neerc.ifmo.ru/wiki/index.php?title=Сортировка_кучей" target="_blank" rel="noopener">https://neerc.ifmo.ru/wiki/index.php?title=Сортировка_кучей</a></p>
<p><a href="https://wiki5.ru/wiki/Heapsort" target="_blank" rel="noopener">https://wiki5.ru/wiki/Heapsort</a></p>
<p><a href="https://wiki.c2.com/?HeapSort" target="_blank" rel="noopener">https://wiki.c2.com/?HeapSort</a></p>
<p><a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B5%D1%80%D0%B5%D0%B2%D0%BE_(%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85)" target="_blank" rel="noopener">https://ru.wikipedia.org/wiki/Дерево (структура данных)</a></p>
<p><a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%83%D1%87%D0%B0_(%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85)" target="_blank" rel="noopener">https://ru.wikipedia.org/wiki/Куча (структура данных)</a></p>
<p><a href="https://www.youtube.com/watch?v=2DmK_H7IdTo" target="_blank" rel="noopener">https://www.youtube.com/watch?v=2DmK_H7IdTo</a></p>
<p><a href="https://www.youtube.com/watch?v=kU4KBD4NFtw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=kU4KBD4NFtw</a></p>
<p><a href="https://www.youtube.com/watch?v=DU1uG5310x0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DU1uG5310x0</a></p>
<p><a href="https://www.youtube.com/watch?v=BzQGPA_v-vc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=BzQGPA_v-vc</a></p>
<p><a href="https://www.geeksforgeeks.org/array-representation-of-binary-heap/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/array-representation-of-binary-heap/</a></p>
<p><a href="https://habr.com/ru/post/112222/" target="_blank" rel="noopener">https://habr.com/ru/post/112222/</a></p>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/BST.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BST.html</a></p>
<p><a href="https://www.youtube.com/watch?v=EQzqHWtsKq4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=EQzqHWtsKq4</a></p>
<p><a href="https://medium.com/@dimko1/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D1%8B-%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8-heapsort-796ba965018b" target="_blank" rel="noopener">https://medium.com/@dimko1/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D1%8B-%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B8-heapsort-796ba965018b</a></p>
<p><a href="https://ru.wikibrief.org/wiki/Heapsort" target="_blank" rel="noopener">https://ru.wikibrief.org/wiki/Heapsort</a></p>
<p><a href="https://www.youtube.com/watch?v=GUUpmrTnNbw" target="_blank" rel="noopener">https://www.youtube.com/watch?v=GUUpmrTnNbw</a></p>